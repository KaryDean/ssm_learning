package com.kearmy.mybatis;import com.kearmy.dao.IUserDao;import com.kearmy.domain.QueryVo;import com.kearmy.domain.User;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.After;import org.junit.Before;import org.junit.Test;import java.io.IOException;import java.io.InputStream;import java.util.Date;import java.util.List;public class TestUser {    private InputStream is;    private SqlSession sqlSession;    private IUserDao userDao;    /**     * 创建IUserDao实现类     * @throws IOException     */    @Before //在所有方法执行之前执行    public void init() throws IOException {        is = Resources.getResourceAsStream("SqlMapConfig.xml");        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(is);        sqlSession = sqlSessionFactory.openSession();        userDao = sqlSession.getMapper(IUserDao.class);    }    /**     * 关闭资源     * @throws IOException     */    @After //在所有方法执行之后执行    public void  close() throws IOException {        sqlSession.commit();//保存后必须提交，否则回滚        sqlSession.close();        is.close();    }    /**     * 测试查询所有操作     * @throws IOException     */    @org.junit.Test    public void testFindAll() throws IOException {//        List<User> users = userDao.findAll();        List<User> users = sqlSession.selectList("com.kearmy.dao.IUserDao.findAll");        for(User user : users){            System.out.println(user);        }    }    /**     * 测试插入用户操作     */    @Test    public void testSaveUser() throws IOException {        User user = new User();        user.setUserAddress("安徽省安庆市");        user.setUserBirthday(new Date());        user.setUserSex("男");        user.setUserName("昕昕");        System.out.println(user);//此时id是null        userDao.saveUser(user);        System.out.println(user);//经过selectKey中select last_insert_id之后id变为最后插入的id值    }    /**     * 测试更新用户操作     */    @Test    public void testUpdateUser() throws IOException {        User user = new User();        user.setUserId(48);        user.setUserAddress("安徽省安庆市");        user.setUserBirthday(new Date());        user.setUserSex("女");        user.setUserName("昕昕hahh");        userDao.updateUser(user);    }    /**     * 测试删除操作     */    @Test    public void testDeleteUser(){        userDao.deleteUser(48);    }    /**     * 根据用户id查询用户     */    @Test    public void testFindById(){        User user = userDao.findById(41);        System.out.println(user);    }    /**     * 根据用户名模糊查询所有用户，注意此时提交的用户名，需要加上%%     */    @Test    public void testFindByUsername(){//        List<User> users = userDao.findByUsername("%昕%");        List<User> users = userDao.findByUsername("昕");        for(User user : users){            System.out.println(user);        }    }    /**     * 查询总记录条数     */    @Test    public void testFindTotal(){        Integer number = userDao.findTotal();        System.out.println(number);    }    /**     * 当不仅仅需要一个user来查询时，可以通过创建一个查询类，来包含user以及其他信息，共同查询     * 通过QueryVo模糊查询所有用户     */    @Test    public void testFindByQueryVo(){        QueryVo queryVo = new QueryVo();        User user = new User();        user.setUserName("%昕%");        queryVo.setUser(user);        List<User> users = userDao.findByQueryVo(queryVo);        for(User u: users){            System.out.println(u);        }    }}