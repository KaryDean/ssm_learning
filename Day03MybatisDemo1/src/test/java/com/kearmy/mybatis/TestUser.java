package com.kearmy.mybatis;import com.kearmy.dao.IUserDao;import com.kearmy.domain.QueryVo;import com.kearmy.domain.User;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.After;import org.junit.Before;import org.junit.Test;import java.io.IOException;import java.io.InputStream;import java.util.ArrayList;import java.util.Date;import java.util.List;public class TestUser {    private InputStream is;    private SqlSession sqlSession;    private IUserDao userDao;    /**     * 创建IUserDao实现类     * @throws IOException     */    @Before //在所有方法执行之前执行    public void init() throws IOException {        is = Resources.getResourceAsStream("SqlMapConfig.xml");        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(is);        sqlSession = sqlSessionFactory.openSession();        userDao = sqlSession.getMapper(IUserDao.class);    }    /**     * 关闭资源     * @throws IOException     */    @After //在所有方法执行之后执行    public void  close() throws IOException {        sqlSession.commit();//保存后必须提交，否则回滚        sqlSession.close();        is.close();    }    /**     * 测试查询所有操作     * @throws IOException     */    @org.junit.Test    public void testFindAll() throws IOException {//        List<User> users = userDao.findAll();        List<User> users = sqlSession.selectList("com.kearmy.dao.IUserDao.findAll");        for(User user : users){            System.out.println(user);        }    }    /**     * 根据用户名模糊查询所有用户，注意此时提交的用户名，需要加上%%     */    @Test    public void testFindByUsername(){//        List<User> users = userDao.findByUsername("%昕%");        List<User> users = userDao.findByUsername("昕");        for(User user : users){            System.out.println(user);        }    }    /**     * 查询总记录条数     */    @Test    public void testFindTotal(){        Integer number = userDao.findTotal();        System.out.println(number);    }    /**     * 当不仅仅需要一个user来查询时，可以通过创建一个查询类，来包含user以及其他信息，共同查询     * 通过QueryVo模糊查询所有用户     */    @Test    public void testFindByQueryVo(){        QueryVo queryVo = new QueryVo();        User user = new User();        user.setUserName("%昕%");        queryVo.setUser(user);        List<User> users = userDao.findByQueryVo(queryVo);        for(User u: users){            System.out.println(u);        }    }    /**     * 通过传入不同的数据实现动态查询,If标签     */    @Test    public void testFindByConditionIf(){        User user = new User();        user.setUserName("昕昕");        user.setUserSex("女");        List<User> users = userDao.findByConditionIf(user);        for(User u: users){            System.out.println(u);        }    }    /**     * 通过传入不同的数据实现动态查询,where标签     */    @Test    public void testFindByConditionWhere(){        User user = new User();        user.setUserName("昕昕");//        user.setUserSex("男");        List<User> users = userDao.findByConditionIf(user);        for(User u: users){            System.out.println(u);        }    }    /**     * 通过foreach实现in集合查询     */    @Test    public void testFindInIds(){        QueryVo queryVo = new QueryVo();        List<Integer> list = new ArrayList<Integer>();        list.add(41);        list.add(50);        list.add(42);        queryVo.setIds(list);        List<User> users = userDao.findInIds(queryVo);        for(User user: users){            System.out.println(user);        }    }}